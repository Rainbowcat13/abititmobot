import json
from download import Parser
from datetime import datetime


class Analyzer:
    BUDGET = ['–±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π',
              '–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å–æ–±–æ–π –∫–≤–æ—Ç—ã',
              '–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç—ã',
              '–ø–æ –æ–±—â–µ–º—É –∫–æ–Ω–∫—É—Ä—Å—É']

    def __init__(self, schedule):
        self.schedule = schedule
        self.schedule_number = json.load(open('schedule_numbers.json', 'r', encoding='utf8'))[schedule]
        self.data = None
        self.update_time = None
        self._parser = Parser(self.schedule_number)
        self.update_data()

    def update_data(self):
        self.data = self._parser.parse()
        self.update_time = datetime.now().strftime('%d.%m.%y %H:%M:%S')

    def filtered_students_amount(self, parameter, possible_values):
        return len(list(filter(lambda row: row[parameter] in possible_values, self.data)))

    def get_info(self):
        result = dict()
        result['–í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π'] = len(self.data)
        result['–ë—é–¥–∂–µ—Ç'] = self.filtered_students_amount('–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', self.BUDGET)
        result['–ë–í–ò'] = self.filtered_students_amount('–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', ['–±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π'])
        result['–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞'] = self.filtered_students_amount('–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
                                                               ['–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å–æ–±–æ–π –∫–≤–æ—Ç—ã'])
        result['–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞'] = self.filtered_students_amount('–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
                                                                ['–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç—ã'])
        result['–ö–æ–Ω—Ç—Ä–∞–∫—Ç'] = self.filtered_students_amount('–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', ['–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ'])
        result['–° —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ'] = self.filtered_students_amount('–ù–∞–ª–∏—á–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ',
                                                                            ['–î–∞'])
        result['–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = self.update_time
        return result

    def get_places_amount(self):
        return json.load(open('schedule_places_amount.json', 'r', encoding='utf8'))[self.schedule]

    def formatted_result(self):
        places_amount = self.get_places_amount()
        abit_amount = self.get_info()
        # print(abit_amount)
        budget_without_quotas = places_amount['–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç'] - \
                                places_amount['–ü–æ –æ—Å–æ–±–æ–π –∫–≤–æ—Ç–µ'] - \
                                places_amount['–ü–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ']
        bwq_abit = abit_amount['–ë—é–¥–∂–µ—Ç'] - abit_amount['–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞'] - abit_amount['–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞']
        static_string = f"üìà –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <a href=\"{self._parser.link()}\">\"{self.schedule}\"</a>.\n\n" \
                        f"üìÑ –í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {abit_amount['–í—Å–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏–π']}, " \
                        f"–≤—Å–µ–≥–æ –º–µ—Å—Ç: {places_amount['–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç'] + places_amount['–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']}.\n\n" \
                        f"üç∫ –ë—é–¥–∂–µ—Ç –±–µ–∑ –∫–≤–æ—Ç: –∑–∞—è–≤–ª–µ–Ω–∏–π {bwq_abit}, –º–µ—Å—Ç {budget_without_quotas}, " \
                        f"–ë–í–ò {abit_amount['–ë–í–ò']}.\n" \
                        f"üéÅ –ë—é–¥–∂–µ—Ç –ø–æ –æ—Å–æ–±—ã–º –∫–≤–æ—Ç–∞–º: –∑–∞—è–≤–ª–µ–Ω–∏–π {abit_amount['–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞']}, " \
                        f"–º–µ—Å—Ç {places_amount['–ü–æ –æ—Å–æ–±–æ–π –∫–≤–æ—Ç–µ']}.\n" \
                        f"üéØ –ë—é–¥–∂–µ—Ç –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–≤–æ—Ç–∞–º: –∑–∞—è–≤–ª–µ–Ω–∏–π {abit_amount['–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞']}, " \
                        f"–º–µ—Å—Ç {places_amount['–ü–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ']}.\n" \
                        f"üíµ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: –∑–∞—è–≤–ª–µ–Ω–∏–π {abit_amount['–ö–æ–Ω—Ç—Ä–∞–∫—Ç']}, " \
                        f"–º–µ—Å—Ç {places_amount['–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']}.\n" \
                        f"üá∫üá≥ –ò–∑ —ç—Ç–∏—Ö –º–µ—Å—Ç –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω: {places_amount['–ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω']}.\n" \
                        f"‚úçÔ∏è–° —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ: {abit_amount['–° —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ']}.\n\n"
        if abit_amount['–ë–í–ò'] > budget_without_quotas:
            static_string += "‚ùå –ù–µ –≤—Å–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –ë–í–ò –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞. " \
                             "–ù–µ –∑–Ω–∞—é, —á—Ç–æ –í–£–ó –±—É–¥–µ—Ç —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n"
        else:
            static_string += f"üü¢ –í—Å–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –ë–í–ò –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞. " \
                             f"–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç - {budget_without_quotas - abit_amount['–ë–í–ò']}.\n"
        if places_amount['–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']:
            static_string += f"ü§º‚Äç‚ôÇÔ∏è–ö–æ–Ω–∫—É—Ä—Å –Ω–∞ –ø–ª–∞—Ç–Ω–æ–µ: " \
                             f"{round(abit_amount['–ö–æ–Ω—Ç—Ä–∞–∫—Ç'] / places_amount['–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç'], 2)} —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Å—Ç–æ.\n"
        if places_amount['–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç']:
            static_string += f"ü§º‚Äç‚ôÇÔ∏è–ö–æ–Ω–∫—É—Ä—Å –Ω–∞ –±—é–¥–∂–µ—Ç: " \
                             f"{round(abit_amount['–ë—é–¥–∂–µ—Ç'] / places_amount['–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç'], 2)} —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Å—Ç–æ.\n\n"
        static_string += f"üïù –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {abit_amount['–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è']}.\n" \
                         f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º!"
        return static_string

    def enrollee_list(self):
        return [row['–§–ò–û'].strip() for row in self.data]

    def count_enrollee_rating(self, enrollee):
        for row in self.data:
            if row['–§–ò–û'].strip() == enrollee.strip():
                return int(row['‚Ññ –ø/–ø']), row['–£—Å–ª–æ–≤–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è']
        return 0, '. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º.'
