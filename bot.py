"""
Simple Bot to reply to Telegram messages.
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

from uuid import uuid4
import json
from time import time
from pymongo.collection import Collection
import pymongo


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, \
    InputTextMessageContent, ParseMode, CallbackQuery
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, InlineQueryHandler, CallbackQueryHandler

from analyzer import Analyzer

COOLDOWN = 11
schedule_numbers = json.load(open('schedule_numbers.json', 'r', encoding='utf8'))
schedules = list(schedule_numbers.keys())
analyzers = {schedule: None for schedule in schedules}


# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.
def start(update, context):
    user_id = update.message.chat.id
    users.insert_one({'state': 'start', 'user_id': user_id, 'schedule': None, 'name': None, 'last_update_time': None})
    reply_keyboard = [[InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ')]]
    update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.',
                              reply_markup=InlineKeyboardMarkup(reply_keyboard, resize_keyboard=True))


def set_schedule(update, context):
    user_id = update.message.chat.id
    schedule = update.message.text
    update.message.reply_text('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
    if analyzers.get(schedule) is None:
        analyzers[schedule]: Analyzer = Analyzer(schedule)
    analyzers[schedule].update_data()

    # users[user_id]['state'] = 'schedule_set'
    users.find_one_and_update({'user_id': user_id}, {'$set': {'state': 'schedule_set'}})
    # users[user_id]['schedule'] = schedule
    users.find_one_and_update({'user_id': user_id}, {'$set': {'schedule': schedule}})
    # users[user_id]['last_update_time'] = -10
    users.find_one_and_update({'user_id': user_id}, {'$set': {'last_update_time': -10}})

    reply_keyboard = [[InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='update_schedule')],
                      [InlineKeyboardButton('ü•á –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ', callback_data='set_enrollee')],
                      [InlineKeyboardButton('üñä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                                            switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ')]]
    update.message.reply_text(analyzers[schedule].formatted_result(),
                              reply_markup=InlineKeyboardMarkup(reply_keyboard),
                              parse_mode=ParseMode.HTML)


def update_schedule(update, context):
    query: CallbackQuery = update.callback_query
    user_id = query.message.chat.id
    current_user = users.find_one({'user_id': user_id})
    if time() - current_user['last_update_time'] > COOLDOWN:
        users.find_one_and_update({'user_id': user_id}, {'$set': {'last_update_time': time()}})
        user_schedule = current_user['schedule']
        if analyzers.get(user_schedule) is None:
            analyzers[user_schedule] = Analyzer(user_schedule)
        analyzers[user_schedule].update_data()
        message = analyzers[user_schedule].formatted_result()
        keyboard_inline = [[InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='update_schedule')],
                           [InlineKeyboardButton('ü•á –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ', callback_data='set_enrollee')],
                           [InlineKeyboardButton('üñä –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                                                 switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ')]]
        query.edit_message_text(text=message, parse_mode=ParseMode.HTML,
                                reply_markup=InlineKeyboardMarkup(keyboard_inline))
        query.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        query.answer(text=f"–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ "
                          f"{int(COOLDOWN - time() + current_user['last_update_time']) + 1}")


def inlinequery(update, context):
    results = []
    query: str = update.inline_query.query
    user_id = update.inline_query.from_user.id
    if query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ: ', '').lower()
        for schedule in schedules:
            if query in schedule.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=schedule,
                    input_message_content=InputTextMessageContent(schedule)))
    elif query.startswith('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –§–ò–û: '):
        query = query.replace('–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –§–ò–û: ', '').lower()
        current_user = users.find_one(user_id)
        if current_user.get('schedule') is None:
            update.inline_query.answer([InlineQueryResultArticle(
                    id=uuid4(),
                    title='–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!',
                    input_message_content=InputTextMessageContent('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!'))])
            return
        schedule = current_user['schedule']
        if analyzers.get(schedule) is None:
            analyzers[schedule] = Analyzer(schedule)
        for enrollee in analyzers[schedule].enrollee_list():
            if query in enrollee.lower() or query == '–≤—Å–µ':
                results.append(InlineQueryResultArticle(
                    id=uuid4(),
                    title=enrollee,
                    input_message_content=InputTextMessageContent('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ' + enrollee)))

    update.inline_query.answer(results[:20])


def help_command(update, context):
    """Send a message when the command /help is issued."""
    update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ò–¢–ú–û. '
                              '–û–Ω —Å–æ–∑–¥–∞–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º, –Ω–µ –∏–º–µ—é—â–∏–º –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                              ' —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å'
                              ' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–¥–Ω–∞–∫–æ –≤ –º–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –¥–µ–ª–∞—Ç—å –∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º–∏'
                              ' –∏ –ø–æ–ª–Ω—ã–º–∏, –ø–æ—ç—Ç–æ–º—É —è –±–µ—Ä—É –∏—Ö —Å '
                              '<a href="https://abit.itmo.ru">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</a>.\n'
                              ' –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Å—Ç –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–µ–Ω. –°–æ –≤—Å–µ–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏'
                              ' –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–∏—à–∏—Ç–µ @rainbow_cat13', parse_mode=ParseMode.HTML)


def set_enrollee(update, context):
    reply_keyboard = [[InlineKeyboardButton('–ù–∞–π—Ç–∏', switch_inline_query_current_chat='–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –§–ò–û: ')]]
    context.bot.send_message(update.callback_query.message.chat.id,
                             '–ù–∞–π–¥–∏—Ç–µ —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–∞ –≤ —Å–ø–∏—Å–∫–µ', reply_markup=InlineKeyboardMarkup(reply_keyboard))


def count_rating(update, context):
    enrollee = update.message.text.replace('–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: ', '')
    current_user = users.find_one(update.message.chat.id)
    if current_user.get('schedule') is None:
        update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!')
        return
    schedule = current_user['schedule']
    place, condition = analyzers[schedule].count_enrollee_rating(enrollee)
    static_string = f'üìä –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ {place}-–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö {condition}'
    if condition == '–ø–æ –æ–±—â–µ–º—É –∫–æ–Ω–∫—É—Ä—Å—É':
        static_string += ' (—É—á–∏—Ç—ã–≤–∞—è –ª—é–¥–µ–π —Å –ë–í–ò –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å)'
    static_string += '.\n'
    places_amount = analyzers[schedule].get_places_amount()
    if condition in ['–ø–æ –æ–±—â–µ–º—É –∫–æ–Ω–∫—É—Ä—Å—É', '–±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π']:
        enr_amount = places_amount['–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç'] - \
                     places_amount['–ü–æ –æ—Å–æ–±–æ–π –∫–≤–æ—Ç–µ'] - \
                     places_amount['–ü–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ']
    elif condition == '–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Å–æ–±–æ–π –∫–≤–æ—Ç—ã':
        enr_amount = places_amount['–ü–æ –æ—Å–æ–±–æ–π –∫–≤–æ—Ç–µ']
    elif condition == '–Ω–∞ –±—é–¥–∂–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç—ã':
        enr_amount = places_amount['–ü–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ']
    else:
        enr_amount = places_amount['–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç']
    if enr_amount >= place:
        static_string += '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å!'
    else:
        static_string += '‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–æ–Ω–∫—É—Ä—Å—É. ' \
                         '–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω–æ–π —Å–ø–æ—Å–æ–± –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?'
    if condition == '–±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π':
        update.message.reply_text('üìä –í—ã –ø–æ—Å—Ç—É–ø–∞–µ—Ç–µ –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π.\n'
                                  '‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å!')
    else:
        update.message.reply_text(static_string)


if __name__ == '__main__':
    """Start the bot."""

    # setting up database
    mongo = pymongo.MongoClient('mongodb://localhost:27017/')
    db = mongo['hse-abit']
    users: Collection = db['users']

    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("1221284343:AAGeQdXqp67UyF6gSHw7NbNJHRbdAdjOoXQ", use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("restart", start))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.regex(f'^({"|".join(schedules)})$'), set_schedule))
    dp.add_handler(MessageHandler(Filters.regex(f'^–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç: .*$'), count_rating))
    dp.add_handler(InlineQueryHandler(inlinequery))

    # on callbacks
    dp.add_handler(CallbackQueryHandler(callback=update_schedule, pattern='^update_schedule$'))
    dp.add_handler(CallbackQueryHandler(callback=set_enrollee, pattern='^set_enrollee$'))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()
